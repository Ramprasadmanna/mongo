 	Next Generation Technologies

1.	Write a MongoDB query to display all the documents in the collection restaurants.
db.resto.find().pretty()
                                      
2.	Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, 
but exclude the field _id for all the documents in the collection restaurant.
db.resto.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1,"_id":0});

3.	Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
db.resto.find({"borough":"Bronx"}).limit(5);
                         
4.	Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100
db.resto.find({"grades":{$elemMatch:{score:{$gt:80,$lt:100}}}})
                               
5.	Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168
db.resto.find({"address.coord":{$lt:-95.754168}})
                                                         
6.	Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
db.resto.find({$and:[{"cuisine":{$ne:"American  "}},{"grades.score":{$gt:70}},                  {"address.coord":{$lt:-65.754168}}]})
                                          
7.	Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' 
and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
db.resto.find({cuisine:{$ne:"American "},"grades.grade":"A",borough:{$ne:"Brooklyn "}}).sort({cuisine:-1})

8.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
db.resto.find({name: /ces$/},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
                            
9.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name
db.resto.find({name: /^Wil/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})                     
                            
10.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants  which contain 'Reg' as three letters somewhere in its name
db.resto.find({name: /.*Reg.*/},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
                         
11.	Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
db.resto.find({"borough":"Bronx", $or:[{"cuisine":"American"},{"cuisine":"Chinese"}]})
                        
12.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronx or Brooklyn
db.resto.find({"borough":{$in:["States Island","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
                     
13.	Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order
db.resto.find().sort({"cuisine":1,"borough":-1})
                          
14.	Write a MongoDB query to display all the addresses that contains the street.
db.resto.find({"address.street":{$exists:true}})
                              
15.	Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double
db.resto.find({"address.coord":{$type:1}})
                          
16.	Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
db.resto.find({"grades.score":{$mod:[7,0]}},{"restaurant_id":1,"name":1,"grades":1})
                                                    
17.	Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014- 08-11T00:00:00Z" among many of survey dates.
db.resto.find({"grades.date":ISODate("2014-08-11T00:00:00Z"),"grades.grade":"A","grades.score":11},{"restaurant_id":1,"name":1,"grades":1})
                            
18.	Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.
db.resto.find({"address.coord.1":{$gt:42,$lte:52}},{"restaurant_id":1,"name":1,"address":1,"coord":1})
                           



